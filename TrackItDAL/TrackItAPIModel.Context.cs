//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrackItDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrackItconnect : DbContext
    {
        public TrackItconnect()
            : base("name=TrackItconnect")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityPrticipantMap> ActivityPrticipantMaps { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseGroupMap> CourseGroupMaps { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<FacultyGroup> FacultyGroups { get; set; }
        public virtual DbSet<GroupTable> GroupTables { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> uspAddActivity(string activityName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string gitSubmission, Nullable<int> cGId, Nullable<int> facultyId)
        {
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var gitSubmissionParameter = gitSubmission != null ?
                new ObjectParameter("GitSubmission", gitSubmission) :
                new ObjectParameter("GitSubmission", typeof(string));
    
            var cGIdParameter = cGId.HasValue ?
                new ObjectParameter("CGId", cGId) :
                new ObjectParameter("CGId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddActivity", activityNameParameter, startDateParameter, endDateParameter, gitSubmissionParameter, cGIdParameter, facultyIdParameter);
        }
    
        public virtual ObjectResult<string> uspAddActivityParticipantMap(string activityStatus, Nullable<System.DateTime> submissionDate, string githubLink, Nullable<int> participantId, Nullable<int> activityId)
        {
            var activityStatusParameter = activityStatus != null ?
                new ObjectParameter("activityStatus", activityStatus) :
                new ObjectParameter("activityStatus", typeof(string));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("submissionDate", submissionDate) :
                new ObjectParameter("submissionDate", typeof(System.DateTime));
    
            var githubLinkParameter = githubLink != null ?
                new ObjectParameter("githubLink", githubLink) :
                new ObjectParameter("githubLink", typeof(string));
    
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("participantId", participantId) :
                new ObjectParameter("participantId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("activityId", activityId) :
                new ObjectParameter("activityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddActivityParticipantMap", activityStatusParameter, submissionDateParameter, githubLinkParameter, participantIdParameter, activityIdParameter);
        }
    
        public virtual ObjectResult<string> uspAddCourse(string courseName, Nullable<int> courseDuration)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var courseDurationParameter = courseDuration.HasValue ?
                new ObjectParameter("CourseDuration", courseDuration) :
                new ObjectParameter("CourseDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddCourse", courseNameParameter, courseDurationParameter);
        }
    
        public virtual ObjectResult<string> uspAddCourseGroupMap(Nullable<int> courseId, Nullable<int> groupId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddCourseGroupMap", courseIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<string> uspAddFaculty(string facultyName, string emailId)
        {
            var facultyNameParameter = facultyName != null ?
                new ObjectParameter("FacultyName", facultyName) :
                new ObjectParameter("FacultyName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddFaculty", facultyNameParameter, emailIdParameter);
        }
    
        public virtual ObjectResult<string> uspAddGacultyMap(Nullable<int> groupId, Nullable<int> facultyId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddGacultyMap", groupIdParameter, facultyIdParameter);
        }
    
        public virtual ObjectResult<string> uspAddGroup(string groupName, Nullable<int> noofParticipant)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var noofParticipantParameter = noofParticipant.HasValue ?
                new ObjectParameter("NoofParticipant", noofParticipant) :
                new ObjectParameter("NoofParticipant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddGroup", groupNameParameter, noofParticipantParameter);
        }
    
        public virtual ObjectResult<string> uspAddParticipant(string partiName, string partiEmailid, Nullable<int> groupId)
        {
            var partiNameParameter = partiName != null ?
                new ObjectParameter("PartiName", partiName) :
                new ObjectParameter("PartiName", typeof(string));
    
            var partiEmailidParameter = partiEmailid != null ?
                new ObjectParameter("PartiEmailid", partiEmailid) :
                new ObjectParameter("PartiEmailid", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspAddParticipant", partiNameParameter, partiEmailidParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateActivity(string activityName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string gitSubmission, Nullable<int> cGId, Nullable<int> facultyId)
        {
            var activityNameParameter = activityName != null ?
                new ObjectParameter("activityName", activityName) :
                new ObjectParameter("activityName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var gitSubmissionParameter = gitSubmission != null ?
                new ObjectParameter("gitSubmission", gitSubmission) :
                new ObjectParameter("gitSubmission", typeof(string));
    
            var cGIdParameter = cGId.HasValue ?
                new ObjectParameter("CGId", cGId) :
                new ObjectParameter("CGId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateActivity", activityNameParameter, startDateParameter, endDateParameter, gitSubmissionParameter, cGIdParameter, facultyIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateActivityParticipantMap(Nullable<int> participantId, Nullable<int> activityId, string activityStatus, Nullable<System.DateTime> submissionDate, string githubLink)
        {
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("participantId", participantId) :
                new ObjectParameter("participantId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("activityId", activityId) :
                new ObjectParameter("activityId", typeof(int));
    
            var activityStatusParameter = activityStatus != null ?
                new ObjectParameter("activityStatus", activityStatus) :
                new ObjectParameter("activityStatus", typeof(string));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("submissionDate", submissionDate) :
                new ObjectParameter("submissionDate", typeof(System.DateTime));
    
            var githubLinkParameter = githubLink != null ?
                new ObjectParameter("githubLink", githubLink) :
                new ObjectParameter("githubLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateActivityParticipantMap", participantIdParameter, activityIdParameter, activityStatusParameter, submissionDateParameter, githubLinkParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateCourse(Nullable<int> courseId, string courseName, Nullable<int> courseDuration)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            var courseDurationParameter = courseDuration.HasValue ?
                new ObjectParameter("courseDuration", courseDuration) :
                new ObjectParameter("courseDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateCourse", courseIdParameter, courseNameParameter, courseDurationParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateFaculty(string facultyName, string emailId, Nullable<int> facultyId)
        {
            var facultyNameParameter = facultyName != null ?
                new ObjectParameter("facultyName", facultyName) :
                new ObjectParameter("facultyName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("facultyId", facultyId) :
                new ObjectParameter("facultyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateFaculty", facultyNameParameter, emailIdParameter, facultyIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateGroup(string groupName, string noOfParticipants)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var noOfParticipantsParameter = noOfParticipants != null ?
                new ObjectParameter("NoOfParticipants", noOfParticipants) :
                new ObjectParameter("NoOfParticipants", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateGroup", groupNameParameter, noOfParticipantsParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateParticipant(Nullable<int> partiId, string participantName, string partiEmailId)
        {
            var partiIdParameter = partiId.HasValue ?
                new ObjectParameter("PartiId", partiId) :
                new ObjectParameter("PartiId", typeof(int));
    
            var participantNameParameter = participantName != null ?
                new ObjectParameter("participantName", participantName) :
                new ObjectParameter("participantName", typeof(string));
    
            var partiEmailIdParameter = partiEmailId != null ?
                new ObjectParameter("partiEmailId", partiEmailId) :
                new ObjectParameter("partiEmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateParticipant", partiIdParameter, participantNameParameter, partiEmailIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateParticipantGroupId(Nullable<int> groupId, Nullable<int> partiId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var partiIdParameter = partiId.HasValue ?
                new ObjectParameter("PartiId", partiId) :
                new ObjectParameter("PartiId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateParticipantGroupId", groupIdParameter, partiIdParameter);
        }
    }
}
